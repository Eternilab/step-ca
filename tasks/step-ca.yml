---
### Pre-Installation
- name: "Create step group as a system group for daemon usage"
  ansible.builtin.group:
    name: "{{ step_ca_group }}"
    state: present
    system: true
  become: true
  tags:
    - install

- name: "Create step user as a system user for daemon usage"
  ansible.builtin.user:
    name: "{{ step_ca_user }}"
    comment: "step and step-ca daemon account"
    group: "{{ step_ca_group }}"
    state: present
    system: true
  become: true
  tags:
    - install

### Installation
- name: "Install dependancies for step-ca (APT based)"
  ansible.builtin.apt:
    pkg: "{{ step_ca_debian_dep }}"
    state: present
    update_cache: true
  become: true
  when: ansible_pkg_mgr == 'apt' and (inventory_hostname in groups['ca_servers'] or inventory_hostname in groups['ra_servers'])
  tags:
    - install

- name: "Be sure that Debian backports are present for source build"
  ansible.builtin.apt_repository:
    repo: "deb http://deb.debian.org/debian {{ ansible_distribution_release }}-backports main contrib non-free non-free-firmware"
    state: present
  become: true
  when: ansible_pkg_mgr == 'apt' and inventory_hostname in groups['ca_servers']
  tags:
    - install

- name: "Install golang from backports for source build"
  ansible.builtin.apt:
    name: "{{ step_ca_debian_dep_backports }}"
    state: present
    default_release: bookworm-backports
    update_cache: true
  become: true
  when: ansible_pkg_mgr == 'apt' and inventory_hostname in groups['ca_servers']
  tags:
    - install

- name: "Compile and install using source tarball from Small Steps adding PKCS#11 support"
  ansible.builtin.import_tasks: manual.yml
  when: step_ca_install_mode == 'manual' and inventory_hostname in groups['ca_servers']

- name: "Install using binary tarball from Small Steps"
  ansible.builtin.import_tasks: binary.yml
  when: step_ca_install_mode == 'binary'

- name: "Install from Debian packages from Small Steps"
  ansible.builtin.import_tasks: debian.yml
  when: step_ca_install_mode == 'debian' or (step_ca_install_mode == 'manual' and inventory_hostname in groups['ra_servers'])

### Pre-Configuration
- name: "Be sure conf directories exist in {{ step_ca_root_dir }}"
  ansible.builtin.file:
    name: "{{ step_ca_root_dir }}/{{ item[0] }}/{{ item[1].name }}"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0700'
    recurse: false
    state: directory
  loop: "{{ step_ca_dirlist | product(step_ca_structure.subCA.instances) }}"
  loop_control:
    label: "{{ step_ca_root_dir }}/{{ item[0] }}/{{ item[1].name }}"
  when: inventory_hostname in groups['ca_servers'] or inventory_hostname in groups['ra_servers']
  become: true
  tags:
    - conf

#################
### Configuration
- name: "Be sure step-ca is configured"
  ansible.builtin.template:
    src: "config/ca.json.j2"
    dest: "{{ step_ca_root_dir }}/config/{{ item.name }}/ca.json"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0600'
  with_items: "{{ step_ca_structure.subCA.instances }}"
  loop_control:
    label: "{{ item.name }} Intermediate CA"
  when: inventory_hostname in groups['ca_servers'] or inventory_hostname in groups['ra_servers']
  become: true
  notify:
    - "Reload step-ca"
  tags:
    - conf

- name: "Systemd service file installed (TODO missing RAs)"
  ansible.builtin.template:
    src: "step-ca.service.j2"
    dest: "/etc/systemd/system/step-ca-{{ item.name }}.service"
  with_items: "{{ step_ca_structure.subCA.instances }}"
  loop_control:
    label: "{{ item.name }} Intermediate CA"
  when: inventory_hostname in groups['ca_servers'] or inventory_hostname in groups['ra_servers']
  become: true
  notify:
    - Systemd daemon-reload
    - "Restart step-ca"
  tags:
    - conf
  # when: ca_servers222

- name: "Check service {{ item.name }} is enable"
  ansible.builtin.service:
    name: "step-ca-{{ item.name }}.service"
    enabled: yes
  with_items: "{{ step_ca_structure.subCA.instances }}"
  loop_control:
    label: "{{ item.name }} Intermediate CA"
  when: inventory_hostname in groups['ca_servers'] or inventory_hostname in groups['ra_servers']
  become: true
  tags:
    - conf

- name: "Be sure step-ca leaf templates are configured"
  ansible.builtin.template:
    src: "templates/certs/x509/leaf.tpl.j2"
    dest: "{{ step_ca_root_dir }}/templates/certs/x509/{{ item.name }}/leaf.tpl"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0600'
    variable_start_string: '@{'
    variable_end_string: '}@'
  with_items: "{{ step_ca_structure.subCA.instances }}"
  loop_control:
    label: "{{ item.name }} Intermediate CA"
  become: true
  when: inventory_hostname in groups['ca_servers']
  notify:
    - "Reload step-ca"
  tags:
    - conf

- name: "Be sure step-ca intermediate CA template is configured"
  ansible.builtin.template:
    src: "templates/certs/x509/intermediate.tpl.j2"
    dest: "{{ step_ca_root_dir }}/templates/certs/x509/{{ item.name }}/intermediate.tpl"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0600'
    variable_start_string: '@{'
    variable_end_string: '}@'
  with_items: "{{ step_ca_structure.subCA.instances }}"
  loop_control:
    label: "{{ item.name }} Intermediate CA"
  become: true
  when: inventory_hostname in groups['ca_servers']
  tags:
    - conf

- name: "Be sure step-ca root CA template is configured"
  ansible.builtin.template:
    src: "templates/certs/x509/root.tpl.j2"
    dest: "{{ step_ca_root_dir }}/templates/certs/x509/root.tpl"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0600'
    variable_start_string: '@{'
    variable_end_string: '}@'
  become: true
  when: inventory_hostname in groups['ca_servers']
  tags:
    - conf

###########################
### Configuration des clefs racines et interm√©diaires

- name: "Configure root CA keys"
  ansible.builtin.import_tasks: root.yml
  notify:
    - "Reload step-ca"
  tags:
    - conf

- name: "Configure keys for each instance of intermediate CA"
  ansible.builtin.include_tasks: intermediate.yml
  with_items:
    "{{ step_ca_structure.subCA.instances }}"
  loop_control:
    label: "{{ item.name }} Intermediate CA"
  tags:
    - conf

- name: "Check there is no root CA private key left in secret folder"
  ansible.builtin.stat:
    name: "{{ step_ca_root_dir}}/secrets/root_ca.key"
  register: ca_key_left
  become: true
  changed_when: ca_key_left.stat.exists
  tags:
    - conf

- name: "Check there is no root CA private key password left in secret folder"
  ansible.builtin.stat:
    name: "{{ step_ca_root_dir }}/secrets/root_ca_password.txt"
  register: ca_password_root_left
  become: true
  changed_when: ca_password_root_left.stat.exists
  tags:
    - conf

- name: "Warning secrets lefts"
  ansible.builtin.debug:
    msg: |-
      !! -- Warning -- !!
      CA private key or password left in secret folder
      !! -- Warning -- !!
  when: ca_password_root_left.stat.exists or ca_key_left.stat.exists
  changed_when: true
  tags:
    - conf

- name: "Check step-ca {{ item.name }} service is started"
  ansible.builtin.service:
    name: "step-ca-{{ item.name }}.service"
    state: started
  with_items: "{{ step_ca_structure.subCA.instances }}"
  loop_control:
    label: "{{ item.name }} Intermediate CA"
  when: inventory_hostname in groups['ca_servers'] or inventory_hostname in groups['ra_servers']
  become: true
  tags:
    - conf
