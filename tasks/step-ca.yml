---
###########################
### Pre-Installation

- name: "Step group exists as a system group for daemon usage"
  ansible.builtin.group:
    name: "{{ step_ca_group }}"
    state: present
    system: true
  become: true
  tags:
    - install

- name: "Step user exists as a system user for daemon usage"
  ansible.builtin.user:
    name: "{{ step_ca_user }}"
    comment: "step and step-ca daemon account"
    group: "{{ step_ca_group }}"
    state: present
    system: true
  become: true
  tags:
    - install

###########################
### Installation

- name: "Compile and install using source tarball from Small Steps adding PKCS#11 support"
  ansible.builtin.import_tasks: manual.yml
  when: step_ca_install_mode == 'manual' and inventory_hostname in groups['ca_server']

- name: "Install using binary tarball from Small Steps"
  ansible.builtin.import_tasks: binary.yml
  when: step_ca_install_mode == 'binary'

- name: "Install from Debian packages from Small Steps"
  ansible.builtin.import_tasks: debian.yml
  when: step_ca_install_mode == 'debian' or (step_ca_install_mode == 'manual' and inventory_hostname in groups['ra_servers'])

###########################
### Pre-Configuration

- name: "Configuration directories are present in {{ step_ca_root_dir }}"
  ansible.builtin.file:
    name: "{{ step_ca_root_dir }}/{{ item[0] }}/{{ item[1].name }}"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0700'
    recurse: false
    state: directory
  loop: "{{ step_ca_dirlist | product(step_ca_structure.subCA.instances) }}"
  loop_control:
    label: "{{ step_ca_root_dir }}/{{ item[0] }}/{{ item[1].name }}"
  when: inventory_hostname in groups['ca_server'] or inventory_hostname in groups['ra_servers']
  become: true
  tags:
    - conf

###########################
### Configuration : certificate templates

- name: "Step-ca root CA template are configured"
  ansible.builtin.template:
    src: "templates/certs/x509/root.tpl.j2"
    dest: "{{ step_ca_root_dir }}/templates/certs/x509/root.tpl"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0600'
    variable_start_string: '@{'
    variable_end_string: '}@'
  become: true
  when: inventory_hostname in groups['ca_server']
  tags:
    - conf

- name: "Step-ca intermediate CA template are configured"
  ansible.builtin.template:
    src: "templates/certs/x509/intermediate.tpl.j2"
    dest: "{{ step_ca_root_dir }}/templates/certs/x509/{{ item.name }}/intermediate.tpl"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0600'
    variable_start_string: '@{'
    variable_end_string: '}@'
  with_items: "{{ step_ca_structure.subCA.instances }}"
  loop_control:
    label: "{{ item.name }} Intermediate CA"
  become: true
  when: inventory_hostname in groups['ca_server']
  tags:
    - conf

- name: "Step-ca leaf templates are configured"
  ansible.builtin.template:
    src: "templates/certs/x509/leaf.tpl.j2"
    dest: "{{ step_ca_root_dir }}/templates/certs/x509/{{ item.name }}/leaf.tpl"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0600'
    variable_start_string: '@{'
    variable_end_string: '}@'
  with_items: "{{ step_ca_structure.subCA.instances }}"
  loop_control:
    label: "{{ item.name }} Intermediate CA"
  become: true
  when: inventory_hostname in groups['ca_server']
  notify:
    - "Reload step-ca"
  tags:
    - conf

###########################
### Configuration : root and intermediate CA certificates

- name: "Root CA certificate and key"
  ansible.builtin.import_tasks: root.yml
  when: inventory_hostname in groups['ca_server']
  notify:
    - "Reload step-ca"
  tags:
    - conf

- name: "Intermediate CAs certificates and keys"
  ansible.builtin.include_tasks: intermediate.yml
  with_items:
    "{{ step_ca_structure.subCA.instances }}"
  loop_control:
    label: "{{ item.name }} Intermediate CA"
  tags:
    - conf

###########################
### Configuration : step-ca

- name: "Step-ca configuration file is present"
  ansible.builtin.template:
    src: "config/ca.json.j2"
    dest: "{{ step_ca_root_dir }}/config/{{ item.name }}/ca.json"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0600'
  with_items: "{{ step_ca_structure.subCA.instances }}"
  loop_control:
    label: "{{ item.name }} Intermediate CA"
  when: inventory_hostname in groups['ca_server'] or inventory_hostname in groups['ra_servers']
  become: true
  notify:
    - "Reload step-ca"
  tags:
    - conf

- name: "The folder ({{ step_ca_jwk_RAs_dir }}) used to store the JWK publik keys for the RAs is present"
  ansible.builtin.file:
    name: "{{ step_ca_root_dir }}/config/{{ item.name }}/{{ step_ca_jwk_RAs_dir }}"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0700'
    recurse: false
    state: directory
  with_items: "{{ step_ca_structure.subCA.instances }}"
  loop_control:
    label: "{{ item.name }} Intermediate CA"
  when: inventory_hostname in groups['ca_server']
  become: true
  tags:
    - conf

- name: "The ca-config-updater.sh Bash script used to inject the RAs JWK public key as provisionner into the running configuration is present"
  ansible.builtin.template:
    src: "config/ca-config-updater.sh.j2"
    dest: "{{ step_ca_root_dir }}/config/{{ item.name }}/ca-config-updater.sh"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0700'
  with_items: "{{ step_ca_structure.subCA.instances }}"
  loop_control:
    label: "{{ item.name }} Intermediate CA"
  when: inventory_hostname in groups['ca_server']
  become: true
  notify:
    - "Reload step-ca"
  tags:
    - conf

###########################
### Configuration : systemd service

- name: "Systemd service file is installed"
  ansible.builtin.template:
    src: "step-ca.service.j2"
    dest: "/etc/systemd/system/step-ca-{{ item.name }}.service"
  with_items: "{{ step_ca_structure.subCA.instances }}"
  loop_control:
    label: "{{ item.name }} Intermediate CA"
  when: inventory_hostname in groups['ca_server'] or inventory_hostname in groups['ra_servers']
  become: true
  notify:
    - Systemd daemon-reload
    - "Restart step-ca"
  tags:
    - conf

- name: "Step-ca services is enable"
  ansible.builtin.service:
    name: "step-ca-{{ item.name }}.service"
    enabled: yes
  with_items: "{{ step_ca_structure.subCA.instances }}"
  loop_control:
    label: "{{ item.name }} Intermediate CA"
  when: not ansible_check_mode and (inventory_hostname in groups['ca_server'] or inventory_hostname in groups['ra_servers'])
  become: true
  tags:
    - conf

###########################
### Services started

- name: "Step-ca services is started"
  ansible.builtin.service:
    name: "step-ca-{{ item.name }}.service"
    state: started
  with_items: "{{ step_ca_structure.subCA.instances }}"
  loop_control:
    label: "{{ item.name }} Intermediate CA"
  when: not ansible_check_mode and (inventory_hostname in groups['ca_server'] or inventory_hostname in groups['ra_servers'])
  become: true
  tags:
    - conf

###########################
### Remaining secrets from root CA

- name: "There is no root CA private key left in secret folder"
  ansible.builtin.stat:
    name: "{{ step_ca_root_dir}}/secrets/root_ca.key"
  register: ca_key_left
  become: true
  when: inventory_hostname in groups['ca_server']
  changed_when: ca_key_left.stat.exists
  tags:
    - conf

- name: "There is no root CA private key password left in secret folder"
  ansible.builtin.stat:
    name: "{{ step_ca_root_dir }}/secrets/root_ca_password.txt"
  register: ca_password_root_left
  become: true
  when: inventory_hostname in groups['ca_server']
  changed_when: ca_password_root_left.stat.exists
  tags:
    - conf

- name: "Warning secrets lefts"
  ansible.builtin.debug:
    msg: |-
      !! -- Warning -- !!
      CA private key or password left in secret folder
      !! -- Warning -- !!
  when: inventory_hostname in groups['ca_server'] and (ca_password_root_left.stat.exists or ca_key_left.stat.exists)
  changed_when: true
  tags:
    - conf

