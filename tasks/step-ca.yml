---
### Pre-Installation
- name: "Create step group as a system group for daemon usage"
  ansible.builtin.group:
    name: "{{ step_ca_group }}"
    state: present
    system: true
  become: true
  tags:
    - install

- name: "Create step user as a system user for daemon usage"
  ansible.builtin.user:
    name: "{{ step_ca_user }}"
    comment: "step and step-ca daemon account"
    group: "{{ step_ca_group }}"
    state: present
    system: true
  become: true
  tags:
    - install

### Installation
- name: "Install dependancies for step-ca (APT based)"
  ansible.builtin.apt:
    pkg: "{{ step_ca_debian_dep }}"
    state: present
    update_cache: true
  become: true
  when: ansible_pkg_mgr == 'apt' and (inventory_hostname in groups['ca_servers'] or inventory_hostname in groups['ra_servers'])
  tags:
    - install

- name: "Be sure that Debian backports are present for source build"
  ansible.builtin.apt_repository:
    repo: "deb http://deb.debian.org/debian {{ ansible_distribution_release }}-backports main contrib non-free non-free-firmware"
    state: present
  become: true
  when: ansible_pkg_mgr == 'apt' and inventory_hostname in groups['ca_servers']
  tags:
    - install

- name: "Install golang from backports for source build"
  ansible.builtin.apt:
    name: "{{ step_ca_debian_dep_backports }}"
    state: present
    default_release: bookworm-backports
    update_cache: true
  become: true
  when: ansible_pkg_mgr == 'apt' and inventory_hostname in groups['ca_servers']
  tags:
    - install

- name: "Compile and install using source tarball from Small Steps adding PKCS#11 support"
  ansible.builtin.import_tasks: manual.yml
  when: step_ca_install_mode == 'manual' and inventory_hostname in groups['ca_servers']

- name: "Install using binary tarball from Small Steps"
  ansible.builtin.import_tasks: binary.yml
  when: step_ca_install_mode == 'binary'

- name: "Install from Debian packages from Small Steps"
  ansible.builtin.import_tasks: debian.yml
  when: step_ca_install_mode == 'debian' or (step_ca_install_mode == 'manual' and inventory_hostname in groups['ra_servers'])

### Pre-Configuration
- name: "Be sure conf directories exist in {{ step_ca_root_dir }}"
  ansible.builtin.file:
    name: "{{ step_ca_root_dir }}/{{ item[0] }}/{{ item[1].name }}"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0700'
    recurse: false
    state: directory
  loop: "{{ step_ca_dirlist | product(step_ca_structure.SubCA.instances) }}"
  when: inventory_hostname in groups['ca_servers'] or inventory_hostname in groups['ra_servers']
  become: true
  tags:
    - conf

###########################
### Configuration des clefs racines et interm√©diaires

- name: "Check if CA public key/certificate exists"
  ansible.builtin.stat:
    # name: "{{ step_ca_root_dir }}/certs/root_ca.crt"
    name: "{{ step_ca_root_dir }}/secrets/root_ca.crt"
  register: ca_pub_key
  when: inventory_hostname in groups['ca_servers']
  become: true
  tags:
    - conf
    - toto

# - name: "Check if CA private key exists"
#   ansible.builtin.file:
#     name: "{{ step_ca_root_dir }}/secrets/root_ca.key"
#     owner: "{{ step_ca_user }}"
#     group: "{{ step_ca_group }}"
#     # mode: '0600'
#     recurse: false
#     state: present
#   register: ca_private_key
#   when: inventory_hostname in groups['ca_servers'] and not step_ca_yubihsm and not ca_pub_key
#   become: true
#   tags:
#     - conf

- name: "Generate random password for CA if none set"
  ansible.builtin.set_fact:
    root_ca_password: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_letters', 'digits', 'punctuation']) }}"
  when: root_ca_password is undefined
  tags:
    - conf
    - toto

- name: "Create password file for CA"
  ansible.builtin.template:
    src: "secrets/root_ca_password_file.j2"
    dest: "{{ step_ca_root_dir }}/secrets/root_ca_password_file"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0400'
  when: inventory_hostname in groups['ca_servers'] and not step_ca_yubihsm and not ca_pub_key.stat.exists
  become: true
  # notify:
  #   - "Restart step-ca"
  tags:
    - conf
    - toto

- name: "Create CA private and public keys"
  ansible.builtin.command:
    cmd: "step certificate create --template={{ step_ca_root_dir }}/templates/certs/x509/root.tpl --password-file {{ step_ca_root_dir }}/secrets/root_ca_password_file  --kty {{ step_ca_structure.rootCA.keytype }} --curve {{ step_ca_structure.rootCA.keycurve }} \"ca.{{ step_ca_domain }}\" {{ step_ca_root_dir }}/secrets/root_ca.crt {{ step_ca_root_dir }}/secrets/root_ca.key"
  when: inventory_hostname in groups['ca_servers'] and not step_ca_yubihsm and not ca_pub_key.stat.exists
  become: true
  changed_when: true
  tags:
    - conf
    - toto

- name: "Fix CA private key ownership and rights"
  ansible.builtin.file:
    name: "{{ step_ca_root_dir }}/secrets/root_ca.key"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0400'
    state: file
  when: inventory_hostname in groups['ca_servers'] and not step_ca_yubihsm and not ca_pub_key.stat.exists
  become: true
  tags:
    - conf
    - toto

- name: "Fix CA public key/certificate ownership and rights"
  ansible.builtin.file:
    name: "{{ step_ca_root_dir }}/secrets/root_ca.crt"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0600'
    state: file
  when: inventory_hostname in groups['ca_servers'] and not step_ca_yubihsm and not ca_pub_key.stat.exists
  become: true
  tags:
    - conf
    - toto

# step certificate create intermediate-ca intermediate-ca.crt intermediate-ca.key --profile intermediate-ca --ca ./root-ca.crt --ca-key ./root-ca.key

- name: "Remove password file for CA as it won't be of any use"
  ansible.builtin.file:
    path: "{{ step_ca_root_dir }}/secrets/root_ca_password_file"
    state: absent
  when: inventory_hostname in groups['ca_servers'] and not step_ca_yubihsm
  become: true
  tags:
    - conf
    - toto

#################
### Configuration
- name: "Be sure step-ca is configured"
  ansible.builtin.template:
    src: "config/ca.json.j2"
    dest: "{{ step_ca_root_dir }}/config/{{ item }}/ca.json"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0600'
  with_items: "{{ step_ca_structure.SubCA.instances }}"
  when: inventory_hostname in groups['ca_servers'] or inventory_hostname in groups['ra_servers']
  become: true
  # notify:
  #   - "Restart step-ca"
  tags:
    - conf

- name: "Update systemd service file in order to use correct conf file (ca_server.json)"
  ansible.builtin.replace:
    path: "{{ step_ca_systemd_svc_file }}"
    regexp: 'ca.json'
    replace: 'ca_server.json'
  when: inventory_hostname in groups['ca_servers'] or inventory_hostname in groups['ra_servers']
  become: true
  notify:
    - Systemd daemon-reload
  # when: ca_servers

- name: "Be sure step-ca CA leaf templates are configured"
  ansible.builtin.template:
    src: "templates/certs/x509/leaf.tpl.j2"
    dest: "{{ step_ca_root_dir }}/templates/certs/x509/{{ item }}/leaf.tpl"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0600'
    variable_start_string: '@{'
    variable_end_string: '}@'
  with_items: "{{ step_ca_structure.SubCA.instances }}"
  become: true
  when: inventory_hostname in groups['ca_servers']
  # notify:
  #   - "Restart step-ca"
  tags:
    - conf

- name: "Be sure step-ca CA other templates are configured"
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "{{ step_ca_root_dir }}/{{ item }}"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0600'
    variable_start_string: '@{'
    variable_end_string: '}@'
  with_items: "{{ step_ca_templates }}"
  become: true
  when: inventory_hostname in groups['ca_servers']
  # notify:
  #   - "Restart step-ca"
  tags:
    - conf
