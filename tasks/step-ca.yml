---
### Pre-Installation
- name: "Create step group as a system group for daemon usage"
  ansible.builtin.group:
    name: "{{ step_ca_group }}"
    state: present
    system: true
  become: true
  tags:
    - install

- name: "Create step user as a system user for daemon usage"
  ansible.builtin.user:
    name: "{{ step_ca_user }}"
    comment: "step and step-ca daemon account"
    group: "{{ step_ca_group }}"
    state: present
    system: true
  become: true
  tags:
    - install

### Installation
- name: "Install dependancies for step-ca (APT based)"
  ansible.builtin.apt:
    pkg: "{{ step_ca_debian_dep }}"
    state: latest
    update_cache: yes
  become: true
  when: ansible_pkg_mgr == 'apt'
  tags:
    - install

- name: "Be sure that Debian backports are present"
  ansible.builtin.apt_repository:
    repo: "deb http://deb.debian.org/debian {{ ansible_distribution_release }}-backports main contrib non-free non-free-firmware"
    state: present
  become: true
  when: ansible_pkg_mgr == 'apt'
  tags:
    - install

- name: "Install golang from backports"
  ansible.builtin.apt:
    name: "{{ step_ca_debian_dep_backports }}"
    state: latest
    default_release: bookworm-backports
    update_cache: yes
  become: true
  when: ansible_pkg_mgr == 'apt'
  tags:
    - install

- name: "Compile and install using source tarball from Small Steps adding PKCS#11 support"
  ansible.builtin.import_tasks: manual.yml
  when: step_ca_install_mode == 'manual'

- name: "Install using binary tarball from Small Steps"
  ansible.builtin.import_tasks: binary.yml
  when: step_ca_install_mode == 'binary'

- name: "Install from Debian packages from Small Steps"
  ansible.builtin.import_tasks: debian.yml
  when: step_ca_install_debian == 'debian'

### Pre-Configuration
- name: "Be sure conf directories exist in {{ step_ca_root_dir }}"
  ansible.builtin.file:
    name: "{{ step_ca_root_dir }}/{{ item }}"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0700'
    recurse: false
    state: directory
  loop: "{{ step_ca_dirlist }}"
  become: true
  tags:
    - conf

- name: "Be sure spool directory {{ step_ca_root_dir }}/templates/certs/x509 exists"
  ansible.builtin.file:
    name: "{{ step_ca_root_dir }}/templates/certs/x509"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0700'
    recurse: false
    state: directory
  become: true
  tags:
    - conf

### Configuration
- name: "Be sure step-ca is configured"
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "{{ step_ca_root_dir }}/{{ item }}"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0600'
  with_items: "{{ step_ca_filelist }}"
  become: true
  # notify:
  #   - "Restart step-ca"
  tags:
    - conf

- name: "Be sure step-ca CA templates are configured"
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "{{ step_ca_root_dir }}/{{ item }}"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0600'
    variable_start_string: '@{'
    variable_end_string: '}@'
  with_items: "{{ step_ca_ca_templates }}"
  become: true
  when: inventory_hostname in groups['ca_servers']
  # notify:
  #   - "Restart step-ca"
  tags:
    - conf

- name: "Be sure step-ca RA templates are configured"
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "{{ step_ca_root_dir }}/{{ item }}"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0600'
    variable_start_string: '@{'
    variable_end_string: '}@'
  with_items: "{{ step_ca_ra_templates }}"
  become: true
  when: inventory_hostname in groups['ra_servers']
  # notify:
  #   - "Restart step-ca"
  tags:
    - conf
