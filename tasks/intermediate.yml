###########################
### Configuration des clefs interm√©diaires

- name: "Check if {{ item.name }} intermediate CA instance public key/certificate exists"
  ansible.builtin.stat:
    name: "{{ step_ca_root_dir }}/certs/{{ item.name }}/intermediate_ca.crt"
  register: ca_pub_key
  when: inventory_hostname in groups['ca_servers']
  become: true
  tags:
    - conf

- name: "Generate random password for {{ item.name }} intermediate CA instance if none set"
  ansible.builtin.set_fact:
    intermediate_ca_password: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_letters', 'digits', 'punctuation']) }}"
  when: inventory_hostname in groups['ca_servers'] and not step_ca_yubihsm and not ca_pub_key.stat.exists
  no_log: true
  tags:
    - conf

- name: "Create password file for {{ item.name }} intermediate CA instance"
  ansible.builtin.template:
    src: "secrets/intermediate_ca_password.txt.j2"
    dest: "{{ step_ca_root_dir }}/secrets/{{ item.name }}/intermediate_ca_password.txt"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0400'
  when: inventory_hostname in groups['ca_servers'] and not step_ca_yubihsm and not ca_pub_key.stat.exists
  no_log: true
  become: true
  notify:
    - "Reload step-ca"
  tags:
    - conf

- name: "Create intermediate {{ item.name }} CA instance private and public keys"
  ansible.builtin.command:
    argv:
      - step
      - certificate
      - create
      - --template
      - "{{ step_ca_root_dir }}/templates/certs/x509/{{ item.name }}/intermediate.tpl"
      - --ca
      - "{{ step_ca_root_dir }}/certs/root_ca.crt"
      - --ca-key
      - "{{ step_ca_root_dir }}/secrets/root_ca.key"
      - --ca-password-file
      - "{{ step_ca_root_dir }}/secrets/root_ca_password.txt"
      - --kty
      - "{{ step_ca_structure.rootCA.keytype }}"
      - --curve
      - "{{ step_ca_structure.rootCA.keycurve }}"
      - --password-file
      - "{{ step_ca_root_dir }}/secrets/{{ item.name }}/intermediate_ca_password.txt"
      - --not-after
      - "{{ step_ca_structure.SubCA.certDuration }}"
      - "{{ item.name }} Intermediate CA"
      - "{{ step_ca_root_dir }}/certs/{{ item.name }}/intermediate_ca.crt"
      - "{{ step_ca_root_dir }}/secrets/{{ item.name }}/intermediate_ca.key"
  when: inventory_hostname in groups['ca_servers'] and not step_ca_yubihsm and not ca_pub_key.stat.exists
  become: true
  changed_when: true
  notify:
    - "Reload step-ca"
  tags:
    - conf

- name: "Fix intermediate {{ item.name }} CA instance private key ownership and rights"
  ansible.builtin.file:
    name: "{{ step_ca_root_dir }}/secrets/{{ item.name }}/intermediate_ca.key"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0400'
    state: file
  when: inventory_hostname in groups['ca_servers'] and not step_ca_yubihsm and not ca_pub_key.stat.exists
  become: true
  notify:
    - "Reload step-ca"
  tags:
    - conf

- name: "Fix intermediate {{ item.name }} CA instance public key/certificate ownership and rights"
  ansible.builtin.file:
    name: "{{ step_ca_root_dir }}/certs/{{ item.name }}/intermediate_ca.crt"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0400'
    state: file
  when: inventory_hostname in groups['ca_servers'] and not step_ca_yubihsm and not ca_pub_key.stat.exists
  become: true
  notify:
    - "Reload step-ca"
  tags:
    - conf
