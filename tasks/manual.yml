---
### Gather facts

- name: "Gathering facts : Debian package already installed ?"
  ansible.builtin.package_facts:
    manager: apt
  register: debian_installed
  tags:
    - install

- name: "Block Manual install if Debian package is installed on system"
  ansible.builtin.fail:
    msg: |-
      !! -- Error -- !!
      Debian step-ca package is already installed on system !
      Uninstall step-ca package and restart playbook.
      !! -- Error -- !!
  when: "'step-ca' in debian_installed.ansible_facts.packages"
  tags:
    - install

- name: "Gathering facts : already installed ?"
  ansible.builtin.stat:
    path: "{{ step_ca_bin_file }}"
  check_mode: false
  register: installed
  tags:
    - install

### Prepare
- name: "Install dependancies for step-ca (APT based)"
  ansible.builtin.apt:
    pkg: "{{ step_ca_debian_dep }}"
    state: present
    update_cache: true
  become: true
  when: not installed.stat.exists and ansible_pkg_mgr == 'apt'
  tags:
    - install

- name: "Be sure that Debian backports are present for source build"
  ansible.builtin.apt_repository:
    repo: "deb http://deb.debian.org/debian {{ ansible_distribution_release }}-backports main contrib non-free non-free-firmware"
    state: present
  become: true
  when: not installed.stat.exists and ansible_pkg_mgr == 'apt'
  tags:
    - install

- name: "Install golang from backports for source build"
  ansible.builtin.apt:
    name: "{{ step_ca_debian_dep_backports }}"
    state: present
    default_release: bookworm-backports
    update_cache: true
  become: true
  when: not installed.stat.exists and ansible_pkg_mgr == 'apt'
  tags:
    - install

- name: "Download step-ca source tarball version {{ step_ca_version }}"
  ansible.builtin.get_url:
    url: "{{ step_ca_url_manual }}"
    dest: "{{ step_ca_tmp_dir }}/{{ step_ca_tarball_manual }}"
    mode: '0640'
    validate_certs: true
  check_mode: false
  environment: "{{ proxy_env }}"
  when: not installed.stat.exists
  tags:
    - install

- name: "Extract tarball to directory {{ step_ca_tmp_dir }}"
  ansible.builtin.unarchive:
    src: "{{ step_ca_tmp_dir }}/{{ step_ca_tarball_manual }}"
    dest: "{{ step_ca_tmp_dir }}/"
    remote_src: true
    keep_newer: true
  when: not installed.stat.exists
  ignore_errors: "{{ ansible_check_mode }}"
  tags:
    - install

### Build
# https://github.com/smallstep/certificates/blob/master/CONTRIBUTING.md#build-step-ca-using-cgo
# sudo apt install golang -t bookworm-backports

- name: "Let's prepare build"
  ansible.builtin.command:
    cmd: make bootstrap
    chdir: "{{ step_ca_tmp_dir }}/certificates-{{ step_ca_version }}"
  when: not ansible_check_mode and not installed.stat.exists
  register: step_ca_make_bootstrap_output
  changed_when: step_ca_make_bootstrap_output.rc != 0
  tags:
    - install

- name: "Let's build"
  ansible.builtin.command:
    cmd: make build GO_ENVS="CGO_ENABLED=1"
    chdir: "{{ step_ca_tmp_dir }}/certificates-{{ step_ca_version }}"
  when: not ansible_check_mode and not installed.stat.exists
  register: step_ca_make_build_output
  changed_when: step_ca_make_build_output.rc != 0
  tags:
    - install

### Installation
- name: "Copy step-ca binary to {{ step_ca_bin_file }}"
  ansible.builtin.copy:
    src: "{{ step_ca_tmp_dir }}/certificates-{{ step_ca_version }}/bin/step-ca"
    dest: "{{ step_ca_bin_file }}"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0755'
    remote_src: true
  when: not ansible_check_mode and not installed.stat.exists
  become: true
  tags:
    - install

### Cleaning install files
- name: "Clean tarball in {{ step_ca_tmp_dir }}"
  ansible.builtin.file:
    name: "{{ step_ca_tmp_dir }}/{{ step_ca_tarball_manual }}"
    state: absent
  when: not installed.stat.exists
  tags:
    - install

# - name: "Clean directory in {{ step_ca_tmp_dir }}"
#   ansible.builtin.file:
#     name: "{{ step_ca_tmp_dir }}/certificates-{{ step_ca_version }}"
#     state: absent
#   tags:
#     - install
