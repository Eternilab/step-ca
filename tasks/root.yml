###########################
### Configuration des clefs racines

- name: "Check if root CA public key/certificate exists"
  ansible.builtin.stat:
    name: "{{ step_ca_root_dir }}/certs/root_ca.crt"
  register: ca_pub_key
  when: inventory_hostname in groups['ca_servers']
  become: true
  tags:
    - conf

- name: "Generate random password for root CA if none set"
  ansible.builtin.set_fact:
    root_ca_password: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_letters', 'digits', 'punctuation']) }}"
  when: inventory_hostname in groups['ca_servers'] and not step_ca_yubihsm and not ca_pub_key.stat.exists
  no_log: true
  tags:
    - conf

- name: "Create password file for root CA"
  ansible.builtin.template:
    src: "secrets/root_ca_password.txt.j2"
    dest: "{{ step_ca_root_dir }}/secrets/root_ca_password.txt"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0400'
  when: inventory_hostname in groups['ca_servers'] and not step_ca_yubihsm and not ca_pub_key.stat.exists
  no_log: true
  become: true
  # notify:
  #   - "Restart step-ca"
  tags:
    - conf

- name: "Create root CA private and public keys"
  ansible.builtin.command:
    argv:
      - step
      - certificate
      - create
      - --template
      - "{{ step_ca_root_dir }}/templates/certs/x509/root.tpl"
      - --kty
      - "{{ step_ca_structure.rootCA.keytype }}"
      - --curve
      - "{{ step_ca_structure.rootCA.keycurve }}"
      - --password-file
      - "{{ step_ca_root_dir }}/secrets/root_ca_password.txt"
      - --not-after
      - "{{ step_ca_structure.rootCA.certDuration }}"
      - "Root CA"
      - "{{ step_ca_root_dir }}/certs/root_ca.crt"
      - "{{ step_ca_root_dir }}/secrets/root_ca.key"
  when: inventory_hostname in groups['ca_servers'] and not step_ca_yubihsm and not ca_pub_key.stat.exists
  become: true
  changed_when: true
  tags:
    - conf

- name: "Check root CA private key ownership and rights"
  ansible.builtin.file:
    name: "{{ step_ca_root_dir }}/secrets/root_ca.key"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0400'
    state: file
  when: not ansible_check_mode and (inventory_hostname in groups['ca_servers'] and not step_ca_yubihsm and not ca_pub_key.stat.exists)
  become: true
  tags:
    - conf

- name: "Check root CA public key/certificate ownership and rights"
  ansible.builtin.file:
    name: "{{ step_ca_root_dir }}/certs/root_ca.crt"
    owner: "{{ step_ca_user }}"
    group: "{{ step_ca_group }}"
    mode: '0400'
    state: file
  when: not ansible_check_mode and (inventory_hostname in groups['ca_servers'] and not step_ca_yubihsm and not ca_pub_key.stat.exists)
  become: true
  tags:
    - conf
